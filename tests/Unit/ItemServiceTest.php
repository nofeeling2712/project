<?php

namespace Tests\Unit;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Mockery;
use App\Services\ItemService;
class ItemServiceTest extends TestCase
{
    /**
     * 
     *var ChannelService
     * 
     */
    private $itemRepository;
    private $itemService;
    private $model;
    public function setUp() {
            $this->itemRepository = Mockery::mock('App\Repositories\Contracts\ItemRepositoryInterface');
            $this->model = Mockery::mock('\App\Models\Item');

            parent::setUp();
        }

    public function tearDown() {
        Mockery::close();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function createItem() {
        $data = array([
        'title' => 'title',
        'desa' => 'desa',        
        'desimg' => 'desimg',
        'desplaintext' => 'desplaintext',
        'pubDate' => 'pubDate',
        'link' => 'link',
        'guid' => 'guid',
        'slash' => 'slash',     
        'channelId'=> 1
        ]);
        $item = (object)[
        'id' => 1,
        'title' => 'title',
        'desa' => 'desa',        
        'desimg' => 'desimg',
        'desplaintext' => 'desplaintext',
        'pubDate' => 'pubDate',
        'link' => 'link',
        'guid' => 'guid',
        'slash' => 'slash',     
        'channelId'=> 1
        ];
        $this->itemRepository
        ->shouldReceive('createItem')
        ->with($data)
        ->andReturn($item);
        $this->itemService = new ItemService($this->itemRepository);
        $result = $this->itemService->createItem($data);

        $this->assertEquals($result->id,1);
    }

    public function testGetItems() {
        $request = array(['channelId'=>1,'content'=>'asd']);
        $this->itemRepository
        ->shouldReceive('getItems')
        ->with($request)
        ->andReturn([(object)[
        'id' => 1,
        'title' => 'title',
        'desa' => 'desa',        
        'desimg' => 'desimg',
        'desplaintext' => 'desplaintext',
        'pubDate' => 'pubDate',
        'link' => 'link',
        'guid' => 'guid',
        'slash' => 'slash',     
        'channelId'=> 1
        ],(object)[
        'id' => 2,
        'title' => 'title',
        'desa' => 'desa',        
        'desimg' => 'desimg',
        'desplaintext' => 'desplaintext',
        'pubDate' => 'pubDate',
        'link' => 'link',
        'guid' => 'guid',
        'slash' => 'slash',     
        'channelId'=> 1
        ]]);
        $this->itemService = new ItemService($this->itemRepository);
        $result = $this->itemService->getItems($request);
        $this->assertEquals($result[0]->channelId,1);
    }
    public function testFindItemById() {
        $this->itemRepository
        ->shouldReceive('findItemById')
        ->with(1)
        ->andReturn((object)[
        'id' => 2,
        'title' => 'title',
        'desa' => 'desa',        
        'desimg' => 'desimg',
        'desplaintext' => 'desplaintext',
        'pubDate' => 'pubDate',
        'link' => 'link',
        'guid' => 'guid',
        'slash' => 'slash',     
        'channelId'=> 1
        ]);
        $this->itemService = new ItemService($this->itemRepository);
        $result = $this->itemService->findItemById(1);
        $this->assertEquals($result->id,2);
    }
    public function testUpdateItem() {
        $request = (object)[
        'id' => 2,
        'title' => 'title',
        'desa' => 'desa',        
        'desimg' => 'desimg',
        'desplaintext' => 'desplaintext',
        'pubDate' => 'pubDate',
        'link' => 'link',
        'guid' => 'guid',
        'slash' => 'slash',     
        'channelId'=> 1
        ];
        $this->itemRepository
        ->shouldReceive('updateItem')
        ->with($request)
        ->andReturn($request);
        $this->itemService = new ItemService($this->itemRepository);
        $result = $this->itemService->updateItem($request);
        $this->assertEquals($result->id,2);
     }
    public function testDeleteItem() {
        $this->itemRepository
        ->shouldReceive('deleteItem')
        ->with(2)
        ->andReturn((object)[
        'id' => 2,
        'title' => 'title',
        'desa' => 'desa',        
        'desimg' => 'desimg',
        'desplaintext' => 'desplaintext',
        'pubDate' => 'pubDate',
        'link' => 'link',
        'guid' => 'guid',
        'slash' => 'slash',     
        'channelId'=> 1
        ]);
        $this->itemService = new ItemService($this->itemRepository);
        $result = $this->itemService->deleteItem(2);
        $this->assertEquals($result->id,2);
    }
}
