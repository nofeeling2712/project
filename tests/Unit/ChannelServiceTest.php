<?php

namespace Tests\Unit;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Mockery;
use App\Services\channelService;
use App\Repositories\Eloquents\ChannelRepository;

class ChannelServiceTest extends TestCase
{
    /**
     * 
     *var ChannelService
     * 
     */
    private $channelRepository;
    private $channelService;
    public function setUp() {
            $this->channelRepository = Mockery::mock('App\Repositories\Contracts\ChannelRepositoryInterface');

            parent::setUp();
        }

    public function tearDown() {
        Mockery::close();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
    /**
     * 
     *
     * @return void
     */
    public function testFindChannelById()
    {
        $this->channelRepository
            ->shouldReceive('findChannelById')
            ->andReturn((object)[
                'id' => 1,
                'title' => 'asd',
                'description' => 'a',
                'urlImage' => 'a',
                'titleImage' => 'x',
                'linkImage' => 'a',
                'pubDate' => 'a',
                'generator' =>'xa',
                'link' => 'ads',
                'userId' => 1
            ]);
        $this->channelService = new ChannelService($this->channelRepository);
        $result = $this->channelService->findChannelById(1);
        $this->assertEquals($result->id,1);
    }
    /**
    *   @group getChannels
    */
    public function testGetChannels() {

        $channel = Mockery::mock('\App\Models\User')->makePartial();
        $channel->shouldReceive('save')->once()->andReturn(true);
        $this->channelRepository
        ->shouldReceive('getChannels')
        ->andReturn([
        (object)[
                'id' => 1,
                'title' => 'asd',
                'description' => 'a',
                'urlImage' => 'a',
                'titleImage' => 'x',
                'linkImage' => 'a',
                'pubDate' => 'a',
                'generator' =>'xa',
                'link' => 'ads',
                'userId' => 1
        ],(object)[
                'id' => 2,
                'title' => 'asd',
                'description' => 'a',
                'urlImage' => 'a',
                'titleImage' => 'x',
                'linkImage' => 'a',
                'pubDate' => 'a',
                'generator' =>'xa',
                'link' => 'ads',
                'userId' => 1
        ]]);
        $this->channelService = new ChannelService($this->channelRepository);
        $result = $this->channelService->getChannels();

        $this->assertEquals($result[0]->id,1);
    }

//     /**
//  * @expectedException Exception
//  * 
//  */
// public function testExceptionMessage()
// {
//     $this->channelService = new ChannelService($this->channelRepository);
//     $this->channelService->findChannelById(d√°dfdasf1);
// }

}
